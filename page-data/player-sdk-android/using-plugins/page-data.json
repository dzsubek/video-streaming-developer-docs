{
    "componentChunkName": "component---src-pages-player-sdk-android-using-plugins-mdx",
    "path": "/player-sdk-android/using-plugins/",
    "result": {"pageContext":{"frontmatter":{"title":"Using Plugins","description":"Using Plugins"},"relativePagePath":"/player-sdk-android/using-plugins.mdx","titleType":"page","MdxNode":{"id":"6fc75f30-1a34-55bc-82a7-05bb0780de87","children":[],"parent":"05d0fd8f-f539-5cc3-9093-ae3678785a4e","internal":{"content":"---\ntitle: Using Plugins\ndescription: Using Plugins\n---\n\nIBM Player SDK version 1.1.0 introduced a plugin system which enables you to extend the media player with additional features.\nPlugins will be provided by IBM and must be provided during player initialization in `UstreamPlayer.initWithContent(ContentDescriptor, MediaPlayerModule)`.\nThese extensions may require different player views than `tv.ustream.player.android.PlayerView`. PlayerView requirements for a plugin will always be stated\nin this documentation but can also be queried from the MediaPlayerModule instance itself using `MediaPlayerModule.getSupportedPlayerViewType()`.\nMake sure to always use the appropriate `PlayerView`.\n\nCreation of the plugin is the user's responsibility, use the constructor of the desired plugin, provide appropriate parameters and set listeners.\nWhen a plugin is passed to a UstreamPlayer instance it will be retained across configuration changes, however the listeners the user provided are not subject\nto the usual `UstreamPlayer.attach()` / `UstreamPlayer.detach()` working. The user needs to manually set and remove those listeners.\nThe current `MediaPlayerModule` in use can be retrieved from the player instance using `UstreamPlayer.getMediaPlayerPlugin()` which returns\na `MediaPlayerModule` that will be cast to the appropriate class that was set during `initWithContent`. The user must know which MediaPlayerModule was\n set during init.\n\nPlease note that while a `MediaPlayerPlugin` provided through `UstreamPlayer.initWithContent` is retained across configuration changes,\nthe plugin itself might NOT support configuration changes at all due to plugin specific reasons. This will always be stated in the plugin's documentation\nunder the **Plugin limitations** section.\n\n## Ads Plugin\n\nIBM Player SDK version 1.1.0 introduced **Ads Plugin** (called `AdsMediaPlayerModuleAndroid`) which can be used to provide ads for the audience using the developer's\n*Double Click for Publishers* account.\n\n**IMPORTANT NOTICE**\n\n*Ads plugin has been deprecated in version 1.5 of the SDK and it is scheduled to be removed in the next upcoming MAJOR version (2.0).\nSupport is no longer provided for this component of the Player SDK.*\n\nSupported features:\n- Pre-roll video ads\n- Mid-roll video ads with multiple configurable scheduling via `AdScheduleRule`s\n- Customizable ad parameters via key/value pairs\n\nAds plugin needs to be instantiated and passed to the `UstreamPlayer` instance via `initWithContent(ContentDescriptor, MediaPlayerModule)`.\nUpon plugin creation the user can provide the following configuration data: `String dfpTagUrl`, `AdScheduleRule scheduleRule`,\nwhere `dfpTagUrl` points to the user's *Double Click for Publishers* account and `adScheduleRule` is the class defining when to show ads.\nSee javadoc for details.\n\nAdditionally, any time after creation the user can set:\n- an `AdStateListener` using `AdsMediaPlayerModuleAndroid.setAdStateListener(AdStateListener)` which notifies the user when an ad is being displayed.\n- `AdData` which is targeting metadata for *DFP*. Feel free to use your own meta and/or meta provided by `MetaDataListener.onMetaData(MetaData)`.\n\n### Example usage\nAdd the Ads Plugin to your build use same local m2 repository in project root folder and add these lines to your gradle file (Google IMA SDK is a dependency of the Ads Plugin):\n\n```gradle\nimplementation 'tv.ustream.player:ibm-player-sdk-android-plugin-ads-external:1.4.0@aar'\nimplementation 'com.google.ads.interactivemedia.v3:interactivemedia:3.11.3'\nimplementation 'com.google.android.gms:play-services-ads-identifier:17.0.0'\nimplementation 'androidx.browser:browser:1.0.0'\n```\n\nIn `AndroidManifest.xml` set configChanges settings in the player activity as:\n\n```xml\n<activity\n        android:name=\"com.my.company.PlayerActivity\"\n        android:configChanges=\"orientation|screenSize|keyboardHidden\"\n        android:label=\"@string/app_name\" />\n```\n\nCreate a UstreamPlayer as usual, but provide an `AdsMediaPlayerModule` at init:\n```java\nustreamPlayer = ustreamPlayerFactory.createUstreamPlayer(playerId);\nif (!ustreamPlayer.isInitialized()) {\n    final AdScheduleRule scheduleRule = new FixedIntervalRule(true, 60000); // Schedules a pre-roll and inserts mid-rolls after 60 seconds of playback time\n    ustreamPlayer.initWithContent(contentDescriptor, new AdsMediaPlayerModuleAndroid(/* AdsStateListener */this, DFP_TAG_URL, scheduleRule));\n}\n```\n\nIn your application's layout file use `tv.ustream.player.android.plugin.ads.AdsPlayerView` (instead of regular `tv.ustream.player.android.PlayerView`).\n\n```xml\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"@android:color/black\">\n\n    <tv.ustream.player.android.plugin.ads.AdsPlayerView\n        android:id=\"@+id/playerview\"\n        android:layout_height=\"match_parent\"\n        android:layout_width=\"match_parent\"\n        android:layout_gravity=\"center\"/>\n\n</FrameLayout>\n```\n\nRetrieve the plugin after init:\n\n```java\nAdsMediaPlayerModuleAndroid mediaPlayerPlugin = ustreamPlayer.getMediaPlayerPlugin();\n```\n\nSet an `AdsStateListener` on the plugin:\n\n```java\nmediaPlayerPlugin.setAdStateListener(new AdStateListener() {\n    @Override\n    public void adStarted() {\n        // Customize UI elements during ad playback, e.g: hide seekbar\n        seekBar.setVisibility(View.INVISIBLE);\n        muteToggleButton.setVisibility(View.INVISIBLE);\n        fullScreenToggleButton.setVisibility(View.INVISIBLE);\n    }\n\n    @Override\n    public void adFinished() {\n        // Restore UI elements after ad playback\n        seekBar.setVisibility(View.VISIBLE);\n        muteToggleButton.setVisibility(View.VISIBLE);\n        fullScreenToggleButton.setVisibility(View.VISIBLE);\n    }\n});\n```\n\nSet meta for *DFP* using an `AdData` object:\n\n```java\nList<String> adKeywords = Arrays.asList(\"testKeyword1\", \"testKeyword2\");\nMap<String, String> adExtras = new HashMap<>();\nadExtras.put(\"adExtraKey1\", \"adExtraValue1\");\nadExtras.put(\"adExtraKey2\", \"adExtraValue2\");\nAdData adData = new AdData(\"TestTitle\", adKeywords, adExtras);\nmediaPlayerPlugin.setAdData(adData);\n```\n\nEverything else works just like it did before, no other code modification is required.\n\n### Plugin limitations\n\n- Ads Plugin does not support configuration changes, use `android:configChanges=\"orientation|screenSize|keyboardHidden\"` in your player activity.\nThis limitations is imposed by Google IMA SDK on which we depend to show ads.\n- Ads Plugin uses it's own PlayerView: `tv.ustream.player.android.plugin.ads.AdsPlayerView`\n- Seeking while an ad is playing will seek the original content, as ad seeking is not possible\n","type":"Mdx","contentDigest":"b87a84c2ee80007b9600041c665be415","owner":"gatsby-plugin-mdx","counter":491},"frontmatter":{"title":"Using Plugins","description":"Using Plugins"},"exports":{},"rawBody":"---\ntitle: Using Plugins\ndescription: Using Plugins\n---\n\nIBM Player SDK version 1.1.0 introduced a plugin system which enables you to extend the media player with additional features.\nPlugins will be provided by IBM and must be provided during player initialization in `UstreamPlayer.initWithContent(ContentDescriptor, MediaPlayerModule)`.\nThese extensions may require different player views than `tv.ustream.player.android.PlayerView`. PlayerView requirements for a plugin will always be stated\nin this documentation but can also be queried from the MediaPlayerModule instance itself using `MediaPlayerModule.getSupportedPlayerViewType()`.\nMake sure to always use the appropriate `PlayerView`.\n\nCreation of the plugin is the user's responsibility, use the constructor of the desired plugin, provide appropriate parameters and set listeners.\nWhen a plugin is passed to a UstreamPlayer instance it will be retained across configuration changes, however the listeners the user provided are not subject\nto the usual `UstreamPlayer.attach()` / `UstreamPlayer.detach()` working. The user needs to manually set and remove those listeners.\nThe current `MediaPlayerModule` in use can be retrieved from the player instance using `UstreamPlayer.getMediaPlayerPlugin()` which returns\na `MediaPlayerModule` that will be cast to the appropriate class that was set during `initWithContent`. The user must know which MediaPlayerModule was\n set during init.\n\nPlease note that while a `MediaPlayerPlugin` provided through `UstreamPlayer.initWithContent` is retained across configuration changes,\nthe plugin itself might NOT support configuration changes at all due to plugin specific reasons. This will always be stated in the plugin's documentation\nunder the **Plugin limitations** section.\n\n## Ads Plugin\n\nIBM Player SDK version 1.1.0 introduced **Ads Plugin** (called `AdsMediaPlayerModuleAndroid`) which can be used to provide ads for the audience using the developer's\n*Double Click for Publishers* account.\n\n**IMPORTANT NOTICE**\n\n*Ads plugin has been deprecated in version 1.5 of the SDK and it is scheduled to be removed in the next upcoming MAJOR version (2.0).\nSupport is no longer provided for this component of the Player SDK.*\n\nSupported features:\n- Pre-roll video ads\n- Mid-roll video ads with multiple configurable scheduling via `AdScheduleRule`s\n- Customizable ad parameters via key/value pairs\n\nAds plugin needs to be instantiated and passed to the `UstreamPlayer` instance via `initWithContent(ContentDescriptor, MediaPlayerModule)`.\nUpon plugin creation the user can provide the following configuration data: `String dfpTagUrl`, `AdScheduleRule scheduleRule`,\nwhere `dfpTagUrl` points to the user's *Double Click for Publishers* account and `adScheduleRule` is the class defining when to show ads.\nSee javadoc for details.\n\nAdditionally, any time after creation the user can set:\n- an `AdStateListener` using `AdsMediaPlayerModuleAndroid.setAdStateListener(AdStateListener)` which notifies the user when an ad is being displayed.\n- `AdData` which is targeting metadata for *DFP*. Feel free to use your own meta and/or meta provided by `MetaDataListener.onMetaData(MetaData)`.\n\n### Example usage\nAdd the Ads Plugin to your build use same local m2 repository in project root folder and add these lines to your gradle file (Google IMA SDK is a dependency of the Ads Plugin):\n\n```gradle\nimplementation 'tv.ustream.player:ibm-player-sdk-android-plugin-ads-external:1.4.0@aar'\nimplementation 'com.google.ads.interactivemedia.v3:interactivemedia:3.11.3'\nimplementation 'com.google.android.gms:play-services-ads-identifier:17.0.0'\nimplementation 'androidx.browser:browser:1.0.0'\n```\n\nIn `AndroidManifest.xml` set configChanges settings in the player activity as:\n\n```xml\n<activity\n        android:name=\"com.my.company.PlayerActivity\"\n        android:configChanges=\"orientation|screenSize|keyboardHidden\"\n        android:label=\"@string/app_name\" />\n```\n\nCreate a UstreamPlayer as usual, but provide an `AdsMediaPlayerModule` at init:\n```java\nustreamPlayer = ustreamPlayerFactory.createUstreamPlayer(playerId);\nif (!ustreamPlayer.isInitialized()) {\n    final AdScheduleRule scheduleRule = new FixedIntervalRule(true, 60000); // Schedules a pre-roll and inserts mid-rolls after 60 seconds of playback time\n    ustreamPlayer.initWithContent(contentDescriptor, new AdsMediaPlayerModuleAndroid(/* AdsStateListener */this, DFP_TAG_URL, scheduleRule));\n}\n```\n\nIn your application's layout file use `tv.ustream.player.android.plugin.ads.AdsPlayerView` (instead of regular `tv.ustream.player.android.PlayerView`).\n\n```xml\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"@android:color/black\">\n\n    <tv.ustream.player.android.plugin.ads.AdsPlayerView\n        android:id=\"@+id/playerview\"\n        android:layout_height=\"match_parent\"\n        android:layout_width=\"match_parent\"\n        android:layout_gravity=\"center\"/>\n\n</FrameLayout>\n```\n\nRetrieve the plugin after init:\n\n```java\nAdsMediaPlayerModuleAndroid mediaPlayerPlugin = ustreamPlayer.getMediaPlayerPlugin();\n```\n\nSet an `AdsStateListener` on the plugin:\n\n```java\nmediaPlayerPlugin.setAdStateListener(new AdStateListener() {\n    @Override\n    public void adStarted() {\n        // Customize UI elements during ad playback, e.g: hide seekbar\n        seekBar.setVisibility(View.INVISIBLE);\n        muteToggleButton.setVisibility(View.INVISIBLE);\n        fullScreenToggleButton.setVisibility(View.INVISIBLE);\n    }\n\n    @Override\n    public void adFinished() {\n        // Restore UI elements after ad playback\n        seekBar.setVisibility(View.VISIBLE);\n        muteToggleButton.setVisibility(View.VISIBLE);\n        fullScreenToggleButton.setVisibility(View.VISIBLE);\n    }\n});\n```\n\nSet meta for *DFP* using an `AdData` object:\n\n```java\nList<String> adKeywords = Arrays.asList(\"testKeyword1\", \"testKeyword2\");\nMap<String, String> adExtras = new HashMap<>();\nadExtras.put(\"adExtraKey1\", \"adExtraValue1\");\nadExtras.put(\"adExtraKey2\", \"adExtraValue2\");\nAdData adData = new AdData(\"TestTitle\", adKeywords, adExtras);\nmediaPlayerPlugin.setAdData(adData);\n```\n\nEverything else works just like it did before, no other code modification is required.\n\n### Plugin limitations\n\n- Ads Plugin does not support configuration changes, use `android:configChanges=\"orientation|screenSize|keyboardHidden\"` in your player activity.\nThis limitations is imposed by Google IMA SDK on which we depend to show ads.\n- Ads Plugin uses it's own PlayerView: `tv.ustream.player.android.plugin.ads.AdsPlayerView`\n- Seeking while an ad is playing will seek the original content, as ad seeking is not possible\n","fileAbsolutePath":"/home/runner/work/video-streaming-developer-docs/video-streaming-developer-docs/src/pages/player-sdk-android/using-plugins.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2203542295","2746626797","3037994772","559098832","768070550"]}